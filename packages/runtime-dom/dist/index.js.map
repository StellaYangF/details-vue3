{
  "version": 3,
  "sources": ["../src/nodeOps.ts", "../../shared/src/generals.ts", "../src/modules/events.ts", "../src/modules/style.ts", "../src/modules/class.ts", "../src/modules/attrs.ts", "../src/patchProp.ts", "../src/index.ts"],
  "sourcesContent": ["const doc = typeof document !== 'undefined' ? document : null\n\nexport const nodeOps = {\n  insert: (child, parent, anchor) => {\n    // parent.insertBefore(child, parent, anchor || null)\n    parent.appendChild(child)\n  },\n\n  remove: child => {\n    const parent = child.parentNode\n    if (parent) {\n      parent.removeChild(child)\n    }\n  },\n\n  createElement: tag => doc.createElement(tag),\n\n  createText: text => doc.createTextNode(text),\n\n  createComment: text => doc.createComment(text),\n\n  setText: (node, text) => {\n    node.nodeValue = text\n  },\n\n  setElementText: (el, text) => {\n    el.textContent = text\n  },\n\n  parentNode: node => node.parentNode,\n\n  nextSibling: node => node.nextSibling,\n\n  querySelector: selector => doc.querySelector(selector)\n}", "export function isObject(val) {\n  return val !== null && typeof val === 'object'\n}\n\nexport function isFunction(val) {\n  return typeof val === 'function'\n}\n\nexport const isArray = Array.isArray\n\nconst onRE = /^on[^a-z]/\nexport const isOn = (key: string) => onRE.test(key)\n\nexport const isString = (val: unknown): val is string => typeof val === 'string'", "\n/* patch event */\nfunction createInvoker(initialValue) {\n  // \u52A8\u6001\u6362\u7ED1\u4E8B\u4EF6\u56DE\u8C03\n  // el.addEventListener(name, nextValue) \n  // nextValue \u76F4\u63A5\u4F20\u5165\uFF0C\u540E\u7EED\u66F4\u6539\u4E86\u56DE\u8C03\uFF0C\u9700\u8981\u89E3\u7ED1\u518D\u7ED1\n  // el.addEventListener(name, invoker.value)\n  const invoker = e => invoker.value(e)\n  invoker.value = initialValue\n\n  return invoker\n}\n\ninterface Invoker extends EventListener {\n  value: EventValue\n}\n\ntype EventValue = Function | Function[]\n\nexport function patchEvent(\n  el: Element & { _vei?: Record<string, Invoker | undefined> },\n  rawName: string,\n  nextValue: EventValue | null\n) {\n  const invokers = el._vei || (el._vei = {})\n\n  // cache\n  const exsistingInvoker = invokers[rawName]\n\n  if (nextValue && exsistingInvoker) {\n    exsistingInvoker.value = nextValue\n  } else {\n    const name = rawName.slice(2).toLocaleLowerCase()\n\n    if (nextValue) {\n      // bind new event and cache\n      const invoker = (invokers[rawName] = createInvoker(nextValue))\n      el.addEventListener(name, invoker)\n    } else if (exsistingInvoker) {\n      // remove\n      el.removeEventListener(name, exsistingInvoker)\n      invokers[rawName] = undefined\n    }\n  }\n}", "export function patchStyle(el: Element, prev, next) {\n  const style = (el as HTMLElement).style\n\n  // add next style\n  for (const key in next) {\n    style[key] = next[key]\n  }\n\n  // remove previous style which not in next style\n  for (const key in prev) {\n    if (next[key] == null) {\n      style[key] = null\n    }\n  }\n}", "export function patchClass(el: Element, value: string | null) {\n  if (value == null) {\n    el.removeAttribute('class')\n  } else {\n    // isSVG el.setAttribute('class', value)\n\n    // directly setting className should be faster than setAttribute in theory\n    // if this is an element during a transition, take the temporary transition\n    // classes into account.  \n    el.className = value\n  }\n}", "export function patchAttr(el: Element, key: string, value: any) {\n  if (value == null) {\n    el.removeAttribute(key)\n  } else {\n    el.setAttribute(key, value)\n  }\n}\n", "import { isOn } from \"@vue/shared\"\nimport { patchEvent } from \"./modules/events\"\nimport { patchStyle } from \"./modules/style\"\nimport { patchClass } from \"./modules/class\"\nimport { patchAttr } from \"./modules/attrs\"\n\nexport function patchProp(el, key, prevValue, nextValue) {\n  if (key === 'class') {\n    patchClass(el, nextValue)\n  } else if (key === 'style') {\n    patchStyle(el, prevValue, nextValue)\n  } else if (isOn(key)) {\n    patchEvent(el, key, nextValue)\n  } else {\n    patchAttr(el, key, nextValue)\n  }\n}\n\n", "import { nodeOps } from \"./nodeOps\";\nimport { patchProp } from \"./patchProp\";\n\nexport const renderOptions = Object.assign({ patchProp }, nodeOps)\n"],
  "mappings": ";AAAA,IAAM,MAAM,OAAO,aAAa,cAAc,WAAW;AAElD,IAAM,UAAU;AAAA,EACrB,QAAQ,CAAC,OAAO,QAAQ,WAAW;AAEjC,WAAO,YAAY,KAAK;AAAA,EAC1B;AAAA,EAEA,QAAQ,WAAS;AACf,UAAM,SAAS,MAAM;AACrB,QAAI,QAAQ;AACV,aAAO,YAAY,KAAK;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,eAAe,SAAO,IAAI,cAAc,GAAG;AAAA,EAE3C,YAAY,UAAQ,IAAI,eAAe,IAAI;AAAA,EAE3C,eAAe,UAAQ,IAAI,cAAc,IAAI;AAAA,EAE7C,SAAS,CAAC,MAAM,SAAS;AACvB,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,gBAAgB,CAAC,IAAI,SAAS;AAC5B,OAAG,cAAc;AAAA,EACnB;AAAA,EAEA,YAAY,UAAQ,KAAK;AAAA,EAEzB,aAAa,UAAQ,KAAK;AAAA,EAE1B,eAAe,cAAY,IAAI,cAAc,QAAQ;AACvD;;;AC1BO,IAAM,UAAU,MAAM;AAE7B,IAAM,OAAO;AACN,IAAM,OAAO,CAAC,QAAgB,KAAK,KAAK,GAAG;;;ACTlD,SAAS,cAAc,cAAc;AAKnC,QAAM,UAAU,OAAK,QAAQ,MAAM,CAAC;AACpC,UAAQ,QAAQ;AAEhB,SAAO;AACT;AAQO,SAAS,WACd,IACA,SACA,WACA;AACA,QAAM,WAAW,GAAG,SAAS,GAAG,OAAO,CAAC;AAGxC,QAAM,mBAAmB,SAAS,OAAO;AAEzC,MAAI,aAAa,kBAAkB;AACjC,qBAAiB,QAAQ;AAAA,EAC3B,OAAO;AACL,UAAM,OAAO,QAAQ,MAAM,CAAC,EAAE,kBAAkB;AAEhD,QAAI,WAAW;AAEb,YAAM,UAAW,SAAS,OAAO,IAAI,cAAc,SAAS;AAC5D,SAAG,iBAAiB,MAAM,OAAO;AAAA,IACnC,WAAW,kBAAkB;AAE3B,SAAG,oBAAoB,MAAM,gBAAgB;AAC7C,eAAS,OAAO,IAAI;AAAA,IACtB;AAAA,EACF;AACF;;;AC5CO,SAAS,WAAW,IAAa,MAAM,MAAM;AAClD,QAAM,QAAS,GAAmB;AAGlC,aAAW,OAAO,MAAM;AACtB,UAAM,GAAG,IAAI,KAAK,GAAG;AAAA,EACvB;AAGA,aAAW,OAAO,MAAM;AACtB,QAAI,KAAK,GAAG,KAAK,MAAM;AACrB,YAAM,GAAG,IAAI;AAAA,IACf;AAAA,EACF;AACF;;;ACdO,SAAS,WAAW,IAAa,OAAsB;AAC5D,MAAI,SAAS,MAAM;AACjB,OAAG,gBAAgB,OAAO;AAAA,EAC5B,OAAO;AAML,OAAG,YAAY;AAAA,EACjB;AACF;;;ACXO,SAAS,UAAU,IAAa,KAAa,OAAY;AAC9D,MAAI,SAAS,MAAM;AACjB,OAAG,gBAAgB,GAAG;AAAA,EACxB,OAAO;AACL,OAAG,aAAa,KAAK,KAAK;AAAA,EAC5B;AACF;;;ACAO,SAAS,UAAU,IAAI,KAAK,WAAW,WAAW;AACvD,MAAI,QAAQ,SAAS;AACnB,eAAW,IAAI,SAAS;AAAA,EAC1B,WAAW,QAAQ,SAAS;AAC1B,eAAW,IAAI,WAAW,SAAS;AAAA,EACrC,WAAW,KAAK,GAAG,GAAG;AACpB,eAAW,IAAI,KAAK,SAAS;AAAA,EAC/B,OAAO;AACL,cAAU,IAAI,KAAK,SAAS;AAAA,EAC9B;AACF;;;ACbO,IAAM,gBAAgB,OAAO,OAAO,EAAE,UAAU,GAAG,OAAO;",
  "names": []
}
